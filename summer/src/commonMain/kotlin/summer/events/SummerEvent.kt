package summer.events

import summer.GetViewProvider
import kotlin.jvm.JvmField

/**
 * Proxy that calls action following defined [SummerEventStrategy].
 * Can proxy actions with 0-12 arguments. Have child to each supported arity.
 *
 * Implementations are generated by SummerEventGenerator.kts
 */
abstract class SummerEvent<TView, in TOwner : GetViewProvider<TView>> {

    abstract val strategy: SummerEventStrategy<TView, TOwner>
    abstract fun viewCreated()

    interface ViewEventExecutor<TView> {
        fun execute(view: TView)
    }

    class A0<TView, in TOwner : GetViewProvider<TView>>(
        private val getAction: (TView) -> (() -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : () -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke() {
            val executor = EventExecutor(getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView>(
            private val getAction: (TView) -> (() -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action()
            }
        }
    }

    class A1<TView, in TOwner : GetViewProvider<TView>, T1>(
        private val getAction: (TView) -> ((T1) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1) {
            val executor = EventExecutor(p1, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1>(
            @JvmField val p1: T1,
            private val getAction: (TView) -> ((T1) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1)
            }
        }
    }

    class A2<TView, in TOwner : GetViewProvider<TView>, T1, T2>(
        private val getAction: (TView) -> ((T1, T2) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2) {
            val executor = EventExecutor(p1, p2, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2>(
            @JvmField val p1: T1, @JvmField val p2: T2,
            private val getAction: (TView) -> ((T1, T2) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2)
            }
        }
    }

    class A3<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3>(
        private val getAction: (TView) -> ((T1, T2, T3) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3) {
            val executor = EventExecutor(p1, p2, p3, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3,
            private val getAction: (TView) -> ((T1, T2, T3) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3)
            }
        }
    }

    class A4<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4>(
        private val getAction: (TView) -> ((T1, T2, T3, T4) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4) {
            val executor = EventExecutor(p1, p2, p3, p4, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4,
            private val getAction: (TView) -> ((T1, T2, T3, T4) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4)
            }
        }
    }

    class A5<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4, T5>(
        private val getAction: (TView) -> ((T1, T2, T3, T4, T5) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4, T5) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5) {
            val executor = EventExecutor(p1, p2, p3, p4, p5, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4, T5>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4, @JvmField val p5: T5,
            private val getAction: (TView) -> ((T1, T2, T3, T4, T5) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4, p5)
            }
        }
    }

    class A6<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4, T5, T6>(
        private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4, T5, T6) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6) {
            val executor = EventExecutor(p1, p2, p3, p4, p5, p6, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4, T5, T6>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4, @JvmField val p5: T5, @JvmField val p6: T6,
            private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4, p5, p6)
            }
        }
    }

    class A7<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4, T5, T6, T7>(
        private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4, T5, T6, T7) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7) {
            val executor = EventExecutor(p1, p2, p3, p4, p5, p6, p7, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4, T5, T6, T7>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4, @JvmField val p5: T5, @JvmField val p6: T6, @JvmField val p7: T7,
            private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4, p5, p6, p7)
            }
        }
    }

    class A8<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4, T5, T6, T7, T8>(
        private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4, T5, T6, T7, T8) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8) {
            val executor = EventExecutor(p1, p2, p3, p4, p5, p6, p7, p8, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4, T5, T6, T7, T8>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4, @JvmField val p5: T5, @JvmField val p6: T6, @JvmField val p7: T7, @JvmField val p8: T8,
            private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4, p5, p6, p7, p8)
            }
        }
    }

    class A9<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
        private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8, T9) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4, T5, T6, T7, T8, T9) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9) {
            val executor = EventExecutor(p1, p2, p3, p4, p5, p6, p7, p8, p9, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4, @JvmField val p5: T5, @JvmField val p6: T6, @JvmField val p7: T7, @JvmField val p8: T8, @JvmField val p9: T9,
            private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8, T9) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4, p5, p6, p7, p8, p9)
            }
        }
    }

    class A10<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
        private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10) {
            val executor = EventExecutor(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4, @JvmField val p5: T5, @JvmField val p6: T6, @JvmField val p7: T7, @JvmField val p8: T8, @JvmField val p9: T9, @JvmField val p10: T10,
            private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
            }
        }
    }

    class A11<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
        private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10, p11: T11) {
            val executor = EventExecutor(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4, @JvmField val p5: T5, @JvmField val p6: T6, @JvmField val p7: T7, @JvmField val p8: T8, @JvmField val p9: T9, @JvmField val p10: T10, @JvmField val p11: T11,
            private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
            }
        }
    }

    class A12<TView, in TOwner : GetViewProvider<TView>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
        private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) -> Unit),
        private val owner: TOwner,
        override val strategy: SummerEventStrategy<TView, TOwner>
    ) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) -> Unit, SummerEvent<TView, TOwner>() {

        override fun viewCreated() {
            strategy.viewCreated(owner)
        }

        override fun invoke(p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10, p11: T11, p12: T12) {
            val executor = EventExecutor(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, getAction)
            strategy.called(owner, executor)
        }

        @Suppress("MemberVisibilityCanBePrivate")
        class EventExecutor<TView, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
            @JvmField val p1: T1, @JvmField val p2: T2, @JvmField val p3: T3, @JvmField val p4: T4, @JvmField val p5: T5, @JvmField val p6: T6, @JvmField val p7: T7, @JvmField val p8: T8, @JvmField val p9: T9, @JvmField val p10: T10, @JvmField val p11: T11, @JvmField val p12: T12,
            private val getAction: (TView) -> ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) -> Unit)
        ) : ViewEventExecutor<TView> {

            override fun execute(view: TView) {
                val action = getAction(view)
                action(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
            }
        }
    }
}